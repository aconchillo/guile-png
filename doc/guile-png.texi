\input texinfo
@c -*-texinfo-*-
@c %**start of header
@setfilename guile-png.info
@documentencoding UTF-8
@settitle Guile-PNG Reference Manual
@c %**end of header
@include version.texi

@copying
This manual documents Guile-PNG version @value{VERSION}.

Copyright (C) 2022 Artyom V. Poptsov

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''
@end copying

@dircategory The Algorithmic Language Scheme
@direntry
* Guile-PNG: (guile-png).  Guile Portable Network Graphics (PNG) library.
@end direntry

@setchapternewpage odd

@titlepage
@sp 10

@title Guile-PNG Reference Manual
@subtitle For Guile-PNG @value{VERSION}

@author Artyom V. Poptsov

@page
@vskip 0pt plus 1filll
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@finalout
@headings double

@ifnottex
@node Top, Introduction, (dir), (dir)
@top The Guile-PNG Reference Manual

@insertcopying
@sp 1
@end ifnottex

@menu
* Introduction::
* Installation::
* API Reference::

Appendices

* GNU Free Documentation License::  The license of this manual.

@end menu

@contents

@node Introduction
@chapter Introduction

Guile-PNG is a @url{https://www.gnu.org/software/guile/, GNU Guile} library
that provides API for Portable Network Graphics
@url{https://tools.ietf.org/html/rfc2083, RFC 2083} format (also known as
``PNG'') parsing.

@node Installation
@chapter Installation

Guile-ICS sources are available form GitHub at
@url{https://github.com/artyom-poptsov/guile-png}.  This section
describes Guile-ICS requirements and installation process.

Guile-ICS depends on the following packages:
@itemize
@item @url{https://www.gnu.org/software/guile/, GNU Guile}, 2.0.12 or later
@item @url{https://github.com/artyom-poptsov/guile-smc, Guile-SMC}, 0.5.2
@end itemize

@section GNU Guix

@subsection Development version
@example
$ guix build -f ./guix.scm
$ guix package -f ./guix.scm
@end example

@section Manual Installation

To build the latest version of Guile-PNG from the sources, you need to
download the sources from GitHub or clone them using Git@footnote{A good
introduction to Git is free Pro Git book, which is available online at
@url{https://git-scm.com/book/en/v2}}.

Cloning can be done as follows:

@example
$ git clone git@@github.com:artyom-poptsov/guile-png.git
@end example

Next, you should configure the sources:

@example
$ cd guile-png/
$ autoreconf -vif
$ ./configure
@end example

And finally build and install the library:

@example
$ make
$ make install
@end example

For a basic explanation of the installation of the package, see the
@file{INSTALL} file.

Please @strong{note} that you will need
@url{https://www.gnu.org/software/automake/, Automake} version 1.12 or
later to run self-tests with @command{make check} (but the library
itself can be built with older Automake version such as 1.11).

@strong{important} You probably want to call @command{configure} with
the @option{--with-guilesitedir} option so that this package is
installed in Guile's default path.  But, if you don't know where your
Guile site directory is, run @command{configure} without the option,
and it will give you a suggestion.

@node API Reference
@chapter API Reference

This chapter describes the Guile-PNG API.

@section PNG

@code{(png)} module contains the basic PNG procedures to read/write PNG
images.

@deffn {Scheme Procedure} png->scm [port=(current-input-port) @
                                   [#:debug-mode?=#f] @
                                   [#:decompress?=#t] @
                                   [#:remove-filter?=#t]

Read PNG data fro m the specified @var{port}, return a new @code{<png-image>}
instance.

@end deffn

@deffn {Scheme Procedure} scm->png image @
                                   [port=(current-output-port)]

Convert an @var{image} to a PNG binary format, print the output to a
@var{port}.

Return value is undefined.

@end deffn

@section PNG Image

@subsection <png-compressed-image>

@deftp {Class} <png-compressed-image> [#:chunks='()]

This class represents a raw PNG image that consists of PNG chunks.

Constructor parameters:

@table @asis
@item #:chunks (chunk-list <list>)
The raw list of PNG chunks (instances of @code{<png-chunk>} class.)
@end table

@end deftp

@deffn {Scheme Procedure} png-compressed-image? x
Check if @var{X} is a @code{<png-compressed-image>} instance.
@end deffn

@deffn {Method} png-image-clone (image <png-compressed-image>)
Copy a PNG @var{IMAGE}, return a new copy.
@end deffn

@deffn {Method} png-image-chunks-query (chunks <list>) (chunk-type <symbol>))
Perform a query on a @var{chunks} list to get all the PNG chunks that have the
specified @var{chunk-type}.

Return a list of PNG chunks.
@end deffn

@deffn {Method} png-image-chunks-query (image <png-compressed-image>) (predicate <procedure>)
Perform a query on an @var{image} to get all the PNG chunks that satisfy a
@var{PREDICATE}.  The predicate is called on each chunk like follows:
@example lisp
(predicate chunk)
@end example

Return a list of PNG chunks.
@end deffn

@deffn {Method} png-image-chunks-query image <png-compressed-image>) (chunk-type <symbol>)
Perform a query on an @var{image} to get all the PNG chunks that have the
specified @var{chunk-type}.

Return a list of PNG chunks.
@end deffn

@deffn {Method} png-image-chunks-query image <png-compressed-image>) (chunk-type <vector>)
Perform a query on an @var{image} to get all the PNG chunks that have the
specified @var{chunk-type} encoded as a byte vector.

Return a list of PNG chunks.
@end deffn

@deffn  {Method} png-image-data (image <png-compressed-image>) (uncompress? <boolean>)
@deffnx {Method} png-image-data (image <png-compressed-image>)
Get the PNG @var{image} data as a single byte vector.  When @var{uncompress?}
option is set to @code{#t}, the procedure returns data in uncompressed form
(this is the default behavior when the option is not set.)

Return the image data as a byte vector.
@end deffn

@deffn {Method} png-image->png (image <png-compressed-image>) (port <output-port>)
Convert an @var{image} to a binary form, print the output data to a
@var{port}.

Return value is undefined.
@end deffn

@deffn  {Method} png-image-pretty-print-data (image <png-compressed-image>) @
                                             (port <port>)
@deffnx {Method} png-image-pretty-print-data (image <png-compressed-image>)
Pretty print the @var{image} data to a @var{port}.  When @var{port} is not
specified, the current error port is used.

Return value is undefined.
@end deffn

@deffn  {Method} png-compressed-image-decompress (image <png-compressed-image>) @
                                                 (remove-filter? <boolean>)
@deffnx {Method} png-compressed-image-decompress (image <png-compressed-image>)
Decompress an @var{image}, return a new @code{<png-image>} instance.

When @var{remove-filter?} is set to @code{#f}, the decoder will not remove PNG
filters from the image; this is useful for debugging purposes
(@var{remove-filter?} is set to @code{#t} by default.)
@end deffn

@subsection <png-image>

@deftp {Class} <png-image> @
               [#:chunks='()] @
               [#:data=(make <bytevector> 0)] @
               [#:data-chunk-size=256]

This class represents a decompressed PNG image.

Constructor parameters:

@table @asis
@item #:data (data <bytevector>)
The image data as a continuous @code{<bytevector>}.
@item #:data-chunk-size (size <number>)
The data chunk size that will be used for image encoder.
@end table

@end deftp

@deffn {Method} png-image-pixel-size (image <png-image>)
Get the @var{image} pixel size according its color type.
@end deffn

@deffn {Method} png-image-pixels (image <png-image>)
Get the total number of pixels for an @var{image}.
@end deffn

@deffn  {Method} png-image-pretty-print-data (image <png-image>) @
                                             (port <port>)
@deffnx {Method} png-image-pretty-print-data (image <png-image>)
Pretty print the @var{image} data to a @var{port}.  When @var{port} is not
specified, the current error port is used.

Return value is undefined.
@end deffn

@deffn {Method} png-image->png (image <png-image>) (port <output-port>)
Convert an @var{image} to the PNG binary format, print the data to a
@var{port}.
@end deffn

@deffn {Method} png-image-clone (image <png-image>)
Make an exact copy of an @var{image}, return the copy.
@end deffn

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi

@bye
