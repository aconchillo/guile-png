;;; Generated by Guile-SMC 0.2.0
;;; <https://github.com/artyom-poptsov/guile-smc>

;;; This finite-state machine is produced by:
;;;   PlantUML <http://www.plantuml.com> Reader Finite-State Machine.
;;;   This FSM is a part of Guile State-Machine Compiler (Guile-SMC)
;;;   <https://github.com/artyom-poptsov/guile-smc>
;;;
;;; Statistics:
;;;   step-counter: 602       
;;;   transition-counter: 121       
;;;
;;; Resolver status:
;;;   #<directory (png fsm-chunk-context) 55bb6030af00>
;;;     #<procedure action:store-crc (ctx byte)>
;;;     #<procedure action:store-data (ctx byte)>
;;;     #<procedure action:store-length (ctx byte)>
;;;     #<procedure action:store-type (ctx byte)>
;;;     #<procedure event-source:no-op (ctx)>
;;;     #<procedure guard:crc-read? (ctx event)>
;;;     #<procedure guard:data-read? (ctx event)>
;;;     #<procedure guard:iend-chunk? (ctx event)>
;;;     #<procedure guard:length-read? (ctx event)>
;;;     #<procedure guard:type-read? (ctx event)>
;;;   #<directory (smc context char-context) 55bb604bc1e0>
;;;     #<<generic> event-source (1)>
;;;     #<procedure #{guard:#t}# (ctx event)>
;;;     #<procedure action:no-op (ctx event)>
;;;     #<procedure action:store (ctx event)>

(define-module
  (png fsm-chunk)
  #:use-module
  (oop goops)
  #:use-module
  (smc fsm)
  #:use-module
  (png fsm-chunk-context)
  #:export
  (<fsm-chunk>))


(define %transition-table
  `(((name . read_data)
     (event-source unquote event-source)
     (transitions
       (,guard:data-read? ,action:store-data read_crc)
       (,#{guard:#t}# ,action:store read_data)))
    ((name . read_crc)
     (event-source unquote event-source)
     (transitions
       (,guard:crc-read? ,action:store-crc #f)
       (,#{guard:#t}# ,action:store read_crc)))
    ((name . read_type)
     (event-source unquote event-source)
     (transitions
       (,guard:type-read? ,action:store-type check_type)
       (,#{guard:#t}# ,action:store read_type)))
    ((name . read_length)
     (event-source unquote event-source)
     (transitions
       (,guard:length-read?
        ,action:store-length
        read_type)
       (,#{guard:#t}# ,action:store read_length)))
    ((name . check_type)
     (event-source unquote event-source:no-op)
     (transitions
       (,guard:iend-chunk? ,action:no-op #f)
       (,#{guard:#t}# ,action:no-op read_data)))))

(define-class <fsm-chunk> (<fsm>))

(define-method
  (initialize (self <fsm-chunk>) initargs)
  (next-method)
  (fsm-event-source-set! self event-source)
  (fsm-transition-table-set!
    self
    (transition-list->hash-table
      self
      %transition-table))
  (fsm-current-state-set!
    self
    (fsm-state self 'read_length)))

