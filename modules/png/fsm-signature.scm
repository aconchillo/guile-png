;;; Generated by Guile-SMC 0.2.0
;;; <https://github.com/artyom-poptsov/guile-smc>

;;; This finite-state machine is produced by:
;;;   PlantUML <http://www.plantuml.com> Reader Finite-State Machine.
;;;   This FSM is a part of Guile State-Machine Compiler (Guile-SMC)
;;;   <https://github.com/artyom-poptsov/guile-smc>
;;;
;;; Statistics:
;;;   step-counter: 1306      
;;;   transition-counter: 243       
;;;
;;; Resolver status:
;;;   #<directory (png fsm-signature-context) 56417a63ff00>
;;;     #<procedure action:unexpected-byte-error (ctx byte)>
;;;     #<procedure action:unexpected-eof-error (ctx byte)>
;;;     #<procedure action:wrong-first-byte-error (ctx byte)>
;;;     #<procedure guard:correct-first-byte? (ctx byte)>
;;;     #<procedure guard:letter-CR? (ctx byte)>
;;;     #<procedure guard:letter-G? (ctx byte)>
;;;     #<procedure guard:letter-LF? (ctx byte)>
;;;     #<procedure guard:letter-N? (ctx byte)>
;;;     #<procedure guard:letter-P? (ctx byte)>
;;;     #<procedure guard:letter-ctrl-z? (ctx byte)>
;;;   #<directory (smc context char-context) 56417a5f61e0>
;;;     #<<generic> event-source (1)>
;;;     #<procedure action:no-op (ctx event)>
;;;     #<procedure guard:eof-object? (ctx ch)>

(define-module
  (png fsm-signature)
  #:use-module
  (oop goops)
  #:use-module
  (smc fsm)
  #:use-module
  (png fsm-signature-context)
  #:export
  (<fsm-signature>))


(define %transition-table
  `(((name . LF)
     (description . "Read the linefeed (LF)")
     (event-source unquote event-source)
     (transitions
       (,guard:eof-object?
        ,action:unexpected-eof-error
        #f)
       (,guard:letter-LF? ,action:no-op ctrl_z)
       (,action:unexpected-byte-error ,action:no-op #f)))
    ((name . final_LF)
     (event-source unquote event-source)
     (transitions
       (,guard:eof-object?
        ,action:unexpected-eof-error
        #f)
       (,guard:letter-LF? ,action:no-op #f)
       (,action:unexpected-byte-error ,action:no-op #f)))
    ((name . CR)
     (description . "Read the carriage return (CR)")
     (event-source unquote event-source)
     (transitions
       (,guard:eof-object?
        ,action:unexpected-eof-error
        #f)
       (,guard:letter-CR? ,action:no-op LF)
       (,action:unexpected-byte-error ,action:no-op #f)))
    ((name . P)
     (description . "Read the \"P\" letter")
     (event-source unquote event-source)
     (transitions
       (,guard:eof-object?
        ,action:unexpected-eof-error
        #f)
       (,guard:letter-P? ,action:no-op N)
       (,action:unexpected-byte-error ,action:no-op #f)))
    ((name . ctrl_z)
     (event-source unquote event-source)
     (transitions
       (,guard:eof-object?
        ,action:unexpected-eof-error
        #f)
       (,guard:letter-ctrl-z? ,action:no-op final_LF)
       (,action:unexpected-byte-error ,action:no-op #f)))
    ((name . read_first_byte)
     (event-source unquote event-source)
     (transitions
       (,guard:eof-object? ,action:no-op #f)
       (,guard:correct-first-byte? ,action:no-op P)
       (,action:wrong-first-byte-error ,action:no-op #f)))
    ((name . N)
     (description . "Read the \"N\" letter")
     (event-source unquote event-source)
     (transitions
       (,guard:eof-object?
        ,action:unexpected-eof-error
        #f)
       (,guard:letter-N? ,action:no-op G)
       (,action:unexpected-byte-error ,action:no-op #f)))
    ((name . G)
     (description . "Read the \"G\" letter")
     (event-source unquote event-source)
     (transitions
       (,guard:eof-object?
        ,action:unexpected-eof-error
        #f)
       (,guard:letter-G? ,action:no-op CR)
       (,action:unexpected-byte-error ,action:no-op #f)))))

(define-class <fsm-signature> (<fsm>))

(define-method
  (initialize (self <fsm-signature>) initargs)
  (next-method)
  (fsm-event-source-set! self event-source)
  (fsm-transition-table-set!
    self
    (transition-list->hash-table
      self
      %transition-table))
  (fsm-current-state-set!
    self
    (fsm-state self 'read_first_byte)))

